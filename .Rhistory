avg_steps_by_inter_daytype = act_data_noNAs %>%
group_by(interval,day) %>%
summarise(avg_steps = mean(steps)) %>%
ungroup()
#change from long to wide format
avg_steps_by_inter_daytype = spread(data=avg_steps_by_inter_daytype, day, avg_steps)
# plot the graphs
p_weekend = ggplot(aes(x=interval, y=weekend),
data= avg_steps_by_inter_daytype)+
geom_line()+
xlab('interval')+
ylab('frequency')
p_weekday = ggplot(aes(x=interval, y=weekday),
data= avg_steps_by_inter_daytype)+
geom_line()+
xlab('interval')+
ylab('frequency')
grid.arrange(p_weekday,p_weekend, ncol=2)
getwd()
setwd("C:/Users/Adhem/Documents/RProjects"/github/RepData_PeerAssessment1)
setwd("C:/Users/Adhem/Documents/RProjects/github/RepData_PeerAssessment1")
setwd("C:/Users/Adhem/Documents/RProjects/github/")
setwd("C:/Users/Adhem/Documents/RProjects/github/RepData_PeerAssessment1/")
library(ggplot2)
library(tidyr)
library(dplyr)
library(gridExtra)
#act_data = read.csv('github/RepData_PeerAssessment1/activity.csv')
act_data = read.csv('/activity.csv')
str(act_data)
head(act_data)
tail(act_data)
library(ggplot2)
library(tidyr)
library(dplyr)
library(gridExtra)
#act_data = read.csv('github/RepData_PeerAssessment1/activity.csv')
act_data = read.csv('/activity.csv')
str(act_data)
head(act_data)
tail(act_data)
library(ggplot2)
library(tidyr)
library(dplyr)
library(gridExtra)
act_data = read.csv('github/RepData_PeerAssessment1/activity.csv')
#act_data = read.csv('/activity.csv')
str(act_data)
head(act_data)
tail(act_data)
library(ggplot2)
library(tidyr)
library(dplyr)
library(gridExtra)
act_data = read.csv('github/RepData_PeerAssessment1/activity.csv')
#act_data = read.csv('/activity.csv')
str(act_data)
head(act_data)
tail(act_data)
getwd()
setwd("C:/Users/Adhem/Documents/RProjects/")
library(ggplot2)
library(tidyr)
library(dplyr)
library(gridExtra)
act_data = read.csv('github/RepData_PeerAssessment1/activity.csv')
#act_data = read.csv('/activity.csv')
str(act_data)
head(act_data)
tail(act_data)
# calculate the total number of steps taken per day
total_steps_per_day = subset(act_data, !is.na(steps)) %>%
group_by(date) %>%
summarise(total_per_day = sum(steps))
total_steps_per_day
#TOTAL!
# calculate the total number of steps taken per day
total_steps_per_day = subset(act_data, !is.na(steps)) %>%
group_by(date) %>%
summarise(total_per_day = sum(steps))
total_steps_per_day
total = sum(total_steps_per_day$int)
total
#TOTAL!
# calculate the total number of steps taken per day
total_steps_per_day = subset(act_data, !is.na(steps)) %>%
group_by(date) %>%
summarise(total_per_day = sum(steps))
total_steps_per_day
total = sum(total_steps_per_day$total_per_day)
total
#TOTAL!
# plotting the histogram of the steps
ggplot(data=total_steps_per_day, aes(total_per_day))+
geom_histogram(bins=10)+
xlab('interval')+
ylab('frequency')
# calculate the mean and the median of steps taken per day
mean(total_steps_per_day$total_per_day)
median(total_steps_per_day$total_per_day)
# get a dataframe grouped by intervals and avg_steps per interval
avg_steps_by_inter = subset(act_data, !is.na(steps)) %>%
group_by(interval) %>%
summarise(avg_steps = mean(steps))
# plot the line graph
ggplot(aes(x=interval, y=avg_steps),
data = avg_steps_by_inter)+
geom_line()+
xlab('Interval')+
ylab('Frequency')
max_interval = filter(avg_steps_by_inter, avg_steps == max(avg_steps))
max_interval$interval
total_NAs = sum(is.na(act_data))
total_NAs
# get the mean and median for the steps grouped by intervals
mean_median_steps_per_int = subset(act_data, !is.na(steps)) %>%
group_by(interval) %>%
summarise(mean_per_int = mean(steps),
median_per_int = median(steps))
act_data_noNAs = act_data
# impute steps with NAs with the average of that interval period
for (i in seq_along(act_data_noNAs$steps)){
if ( is.na(act_data_noNAs$steps[i]) ){
act_data_noNAs$steps[i] = filter(mean_median_steps_per_int,
interval == act_data_noNAs$interval[i])$mean_per_int
}
}
# check that there is not any NAs
sum(is.na(act_data_noNAs))
total_steps_per_day = act_data_noNAs %>%
group_by(date) %>%
summarise(total_per_day = sum(steps))
ggplot(data = total_steps_per_day, aes(total_per_day) ) +
geom_histogram(bins=10)+
xlab('interval')+
ylab('frequency')
# calculate the mean and the median of steps taken per day
mean(total_steps_per_day$total_per_day)
median(total_steps_per_day$total_per_day)
act_data_noNAs$date= as.Date(act_data_noNAs$date)
weekend = c('Saturday', 'Sunday')
days= weekdays(act_data_noNAs$date)
f_days = days
for (i in seq_along(days)){
if (days[i] %in% weekend){
f_days[i] = 'weekend'
}else{
f_days[i] = 'weekday'
}
}
f_days = factor(f_days)
act_data_noNAs$day = f_days
avg_steps_by_inter_daytype = act_data_noNAs %>%
group_by(interval,day) %>%
summarise(avg_steps = mean(steps)) %>%
ungroup()
#change from long to wide format
avg_steps_by_inter_daytype = spread(data=avg_steps_by_inter_daytype, day, avg_steps)
# plot the graphs
p_weekend = ggplot(aes(x=interval, y=weekend),
data= avg_steps_by_inter_daytype)+
geom_line()+
xlab('interval')+
ylab('frequency')
p_weekday = ggplot(aes(x=interval, y=weekday),
data= avg_steps_by_inter_daytype)+
geom_line()+
xlab('interval')+
ylab('frequency')
grid.arrange(p_weekday,p_weekend, ncol=2)
avg_steps_by_inter_daytype = act_data_noNAs %>%
group_by(interval,day) %>%
summarise(avg_steps = mean(steps)) %>%
ungroup()
#change from long to wide format
avg_steps_by_inter_daytype = spread(data=avg_steps_by_inter_daytype, day, avg_steps)
# plot the graphs
p_weekend = ggplot(aes(x=interval, y=weekend),
data= avg_steps_by_inter_daytype)+
geom_line()+
xlab('interval')+
ylab('frequency')
p_weekday = ggplot(aes(x=interval, y=weekday),
data= avg_steps_by_inter_daytype)+
geom_line()+
xlab('interval')+
ylab('frequency')
grid.arrange(p_weekday,p_weekend, ncol=1)
avg_steps_by_inter_daytype = act_data_noNAs %>%
group_by(interval,day) %>%
summarise(avg_steps = mean(steps)) %>%
ungroup()
#change from long to wide format
avg_steps_by_inter_daytype = spread(data=avg_steps_by_inter_daytype, day, avg_steps)
# plot the graphs
p_weekend = ggplot(aes(x=interval, y=weekend),
data= avg_steps_by_inter_daytype)+
geom_line()+
xlab('interval')+
ylab('frequency')+
labs(title='weekend')
p_weekday = ggplot(aes(x=interval, y=weekday),
data= avg_steps_by_inter_daytype)+
geom_line()+
xlab('interval')+
ylab('frequency')
grid.arrange(p_weekday,p_weekend, ncol=1)
avg_steps_by_inter_daytype = act_data_noNAs %>%
group_by(interval,day) %>%
summarise(avg_steps = mean(steps)) %>%
ungroup()
#change from long to wide format
avg_steps_by_inter_daytype = spread(data=avg_steps_by_inter_daytype, day, avg_steps)
# plot the graphs
p_weekend = ggplot(aes(x=interval, y=weekend),
data= avg_steps_by_inter_daytype)+
geom_line()+
xlab('interval')+
ylab('frequency')+
ggtitle('weekend')
p_weekday = ggplot(aes(x=interval, y=weekday),
data= avg_steps_by_inter_daytype)+
geom_line()+
xlab('interval')+
ylab('frequency')+
ggitlt(weekday)
grid.arrange(p_weekday,p_weekend, ncol=1)
ggtitle(weekday)
avg_steps_by_inter_daytype = act_data_noNAs %>%
group_by(interval,day) %>%
summarise(avg_steps = mean(steps)) %>%
ungroup()
#change from long to wide format
avg_steps_by_inter_daytype = spread(data=avg_steps_by_inter_daytype, day, avg_steps)
# plot the graphs
p_weekend = ggplot(aes(x=interval, y=weekend),
data= avg_steps_by_inter_daytype)+
geom_line()+
xlab('interval')+
ylab('frequency')+
ggtitle('weekend')
p_weekday = ggplot(aes(x=interval, y=weekday),
data= avg_steps_by_inter_daytype)+
geom_line()+
xlab('interval')+
ylab('frequency')+
ggtitle(weekday)
grid.arrange(p_weekday,p_weekend, ncol=1)
avg_steps_by_inter_daytype = act_data_noNAs %>%
group_by(interval,day) %>%
summarise(avg_steps = mean(steps)) %>%
ungroup()
#change from long to wide format
avg_steps_by_inter_daytype = spread(data=avg_steps_by_inter_daytype, day, avg_steps)
# plot the graphs
p_weekend = ggplot(aes(x=interval, y=weekend),
data= avg_steps_by_inter_daytype)+
geom_line()+
xlab('interval')+
ylab('frequency')+
ggtitle('weekend')
p_weekday = ggplot(aes(x=interval, y=weekday),
data= avg_steps_by_inter_daytype)+
geom_line()+
xlab('interval')+
ylab('frequency')+
ggtitle('weekday')
grid.arrange(p_weekday,p_weekend, ncol=1)
mean_median_steps_by_dy = subset(act_data, !is.na(steps)) %>%
group_by(date) %>%
summarise(mean = mean(steps),
median= median(steps))
# calculate the mean and the median of steps taken per day
mean(total_steps_per_day$total_per_day)
median(total_steps_per_day$total_per_day)
# calculate the mean and the median of steps taken per day
mean_median_steps_by_dy = subset(act_data, !is.na(steps)) %>%
group_by(date) %>%
summarise(mean = mean(steps),
median= median(steps))
mean_median_steps_by_dy
# the overall mean and median
mean(total_steps_per_day$total_per_day)
median(total_steps_per_day$total_per_day)
getwd()
setwd("C:/Users/Adhem/Documents/RProjects"/github/RepData_PeerAssessment1)
setwd("C:/Users/Adhem/Documents/RProjects/github/RepData_PeerAssessment1"")
setwd("C:/Users/Adhem/Documents/RProjects/github/RepData_PeerAssessment1")
getwd()
setwd("C:/Users/Adhem/Documents/RProjects/github/RepData_PeerAssessment1/")
getwd()
avg_steps_by_inter
library(ggplot2)
library(tidyr)
library(dplyr)
library(gridExtra)
#act_data = read.csv('github/RepData_PeerAssessment1/activity.csv')
act_data = read.csv('activity.csv')
str(act_data)
head(act_data)
tail(act_data)
# calculate the total number of steps taken per day
total_steps_per_day = subset(act_data, !is.na(steps)) %>%
group_by(date) %>%
summarise(total_per_day = sum(steps))
total_steps_per_day
#overall total
total = sum(total_steps_per_day$total_per_day)
total
#TOTAL!
# calculate the total number of steps taken per day
total_steps_per_day = subset(act_data, !is.na(steps)) %>%
group_by(date) %>%
summarise(total_per_day = sum(steps))
total_steps_per_day
#overall total
total = sum(total_steps_per_day$total_per_day)
total
# calculate the total number of steps taken per day
total_steps_per_day = subset(act_data, !is.na(steps)) %>%
group_by(date) %>%
summarise(total_per_day = sum(steps))
total_steps_per_day
#overall total
overall_total = sum(total_steps_per_day$total_per_day)
overall_total
# calculate the total number of steps taken per day
total_steps_per_day = subset(act_data, !is.na(steps)) %>%
group_by(date) %>%
summarise(total_per_day = sum(steps))
total_steps_per_day
#overall total
overall_total = sum(total_steps_per_day$total_per_day)
overall_total
# calculate the total number of steps taken per day
total_steps_per_day = subset(act_data, !is.na(steps)) %>%
group_by(date) %>%
summarise(total_per_day = sum(steps))
total_steps_per_day
#overall total
overall_total = sum(total_steps_per_day$total_per_day)
overall_total
# plotting the histogram of the steps
ggplot(data=total_steps_per_day, aes(total_per_day))+
geom_histogram(bins=10)+
xlab('interval')+
ylab('frequency')
# calculate the mean and the median of steps taken per day
mean_median_steps_by_dy = subset(act_data, !is.na(steps)) %>%
group_by(date) %>%
summarise(mean = mean(steps),
median= median(steps))
mean_median_steps_by_dy
# the overall mean and median
mean(total_steps_per_day$total_per_day)
median(total_steps_per_day$total_per_day)
# get a dataframe grouped by intervals and avg_steps per interval
avg_steps_by_inter = subset(act_data, !is.na(steps)) %>%
group_by(interval) %>%
summarise(avg_steps = mean(steps))
# plot the line graph
ggplot(aes(x=interval, y=avg_steps),
data = avg_steps_by_inter)+
geom_line()+
xlab('Interval')+
ylab('Frequency')
max_interval = filter(avg_steps_by_inter, avg_steps == max(avg_steps))
max_interval$interval
avg_steps_by_inter
max = max(avg_steps_by_inter$avg_steps)
max
max = max(avg_steps_by_inter$avg_steps)[1]
max
max = max(avg_steps_by_inter$avg_steps)[2]
max
max = max(avg_steps_by_inter$avg_steps)[0]
max
max_interval = filter(avg_steps_by_inter, avg_steps == max(avg_steps))
max_interval$interval
max = max(avg_steps_by_inter$avg_steps)
max
class(max_interval)
max_interval
max_interval[1]
supressMessages(library(ggplot2))
suppressMessages(library(ggplot2))
# plotting the histogram of the steps
ggplot(data=total_steps_per_day, aes(total_per_day))+
geom_histogram(bins=10)+
xlab('interval')+
ylab('frequency')+
ggtitle('histogram of the total number of steps taken each day')
# get a dataframe grouped by intervals and avg_steps per interval
avg_steps_by_inter = subset(act_data, !is.na(steps)) %>%
group_by(interval) %>%
summarise(avg_steps = mean(steps))
# plot the line graph
ggplot(aes(x=interval, y=avg_steps),
data = avg_steps_by_inter)+
geom_line()+
xlab('Interval')+
ylab('Frequency')+
ggtitle('a 5-minute interval vs average no. of steps across all days')
total_steps_per_day = act_data_noNAs %>%
group_by(date) %>%
summarise(total_per_day = sum(steps),
mean_per_day = mean(steps),
median_per_day = median(steps))
ggplot(data = total_steps_per_day, aes(total_per_day) ) +
geom_histogram(bins=10)+
xlab('interval')+
ylab('frequency')
# calculate the mean and the median of steps taken per day
mean(total_steps_per_day$total_per_day)
median(total_steps_per_day$total_per_day)
summary_steps_per_day = act_data_noNAs %>%
group_by(date) %>%
summarise(total_per_day = sum(steps),
mean_per_day = mean(steps),
median_per_day = median(steps))
summary_steps_per_day
ggplot(data = summary_steps_per_day, aes(total_per_day) ) +
geom_histogram(bins=10)+
xlab('interval')+
ylab('frequency')
# calculate the mean and the median of steps taken per day
mean(summary_steps_per_day$total_per_day)
median(summary_steps_per_day$total_per_day)
summary_steps_per_day = act_data_noNAs %>%
group_by(date) %>%
summarise(total_per_day = sum(steps),
mean_per_day = mean(steps),
median_per_day = median(steps))
suppressMessages(library(ggplot2))
suppressMessages(library(tidyr))
suppressMessages(library(dplyr))
suppressMessages(library(gridExtra))
# Read in the Data
act_data = read.csv('activity.csv')
# glimpse on the data, str
str(act_data)
# glimpse on the data, head
head(act_data)
# glimpse on the data, tail
tail(act_data)
# calculate the total number of steps taken per day
total_steps_per_day = subset(act_data, !is.na(steps)) %>%
group_by(date) %>%
summarise(total_per_day = sum(steps))
total_steps_per_day
#overall total
sum(total_steps_per_day$total_per_day)
# plotting the histogram of the steps
ggplot(data=total_steps_per_day, aes(total_per_day))+
geom_histogram(bins=10)+
xlab('interval')+
ylab('frequency')+
ggtitle('histogram of the total number of steps taken each day')
# calculate the mean and the median of steps taken per day
mean_median_steps_by_dy = subset(act_data, !is.na(steps)) %>%
group_by(date) %>%
summarise(mean = mean(steps),
median= median(steps))
mean_median_steps_by_dy
# the overall mean
mean(total_steps_per_day$total_per_day)
# the overall median
median(total_steps_per_day$total_per_day)
# get a dataframe grouped by intervals and avg_steps per interval
avg_steps_by_inter = subset(act_data, !is.na(steps)) %>%
group_by(interval) %>%
summarise(avg_steps = mean(steps))
# plot the line graph
ggplot(aes(x=interval, y=avg_steps),
data = avg_steps_by_inter)+
geom_line()+
xlab('Interval')+
ylab('Frequency')+
ggtitle('a 5-minute interval vs average no. of steps across all days')
# filter by the max average steps and get the corrospondant interval
max_interval = filter(avg_steps_by_inter, avg_steps == max(avg_steps))
max_interval$interval
total_NAs = sum(is.na(act_data))
total_NAs
# get the mean and median for the steps grouped by intervals
mean_median_steps_per_int = subset(act_data, !is.na(steps)) %>%
group_by(interval) %>%
summarise(mean_per_int = mean(steps),
median_per_int = median(steps))
act_data_noNAs = act_data
# impute steps with NAs with the average of that interval period
for (i in seq_along(act_data_noNAs$steps)){
if ( is.na(act_data_noNAs$steps[i]) ){
act_data_noNAs$steps[i] = filter(mean_median_steps_per_int,
interval == act_data_noNAs$interval[i])$mean_per_int
}
}
# check that there is not any NAs
sum(is.na(act_data_noNAs))
summary_steps_per_day = act_data_noNAs %>%
group_by(date) %>%
summarise(total_per_day = sum(steps),
mean_per_day = mean(steps),
median_per_day = median(steps))
summary_steps_per_day
ggplot(data = summary_steps_per_day, aes(total_per_day) ) +
geom_histogram(bins=10)+
xlab('interval')+
ylab('frequency')
# calculate the mean and the median of steps taken per day
mean(summary_steps_per_day$total_per_day)
median(summary_steps_per_day$total_per_day)
